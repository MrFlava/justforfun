import enum
import datetime

from botmanlib.menus import OneListMenu, ArrowAddEditMenu
from botmanlib.menus.helpers import add_to_db, group_buttons
from botmanlib.messages import send_or_edit
from formencode import validators
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ConversationHandler


from src.models import DBSession, Dog, Competition, DogCompetitions, SocialPosition


def delete_refresh_job(context):
    user_id = context.user_data['user'].id
    for job in context.job_queue.get_jobs_by_name(f"refresh_dogs_menu_job_{user_id}"):
        job.schedule_removal()


class ClubDogsMenu(OneListMenu):
    menu_name = 'club_dogs_menu'
    model = Dog

    class States(enum.Enum):
        ACTION = 1
        ASK_SOCIAL_POSITION = 2
        ASK_COMPETITION = 3

    def entry(self, update, context):
        return super(ClubDogsMenu, self).entry(update, context)

    def query_objects(self, context):
        club = self.parent.selected_object(context)
        return DBSession.query(Dog).filter(Dog.dog_training_club_id == club.id).all()

    def entry_points(self):
        return [CallbackQueryHandler(self.entry, pattern='^club_dogs$', pass_user_data=True)]

    def message_text(self, context, obj):

            if obj:
                message_text = "–°–æ–±–∞–∫–∏ –∫–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—É–±–∞ –∏ –∏—Ö —Ö–æ–∑—è–µ–≤–∞" + '\n'
                message_text += f"–ö–ª–∏—á–∫–∞: {obj.nickname}" + '\n'
                message_text += f"–ü–æ—Ä–æ–¥–∞: {obj.breed}" + '\n'
                message_text += f"–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {obj.year}" + '\n'
                message_text += f"–¶–µ–Ω–∞ –∑–∞ —â–µ–Ω–∫–∞: {obj.price} UAH" + '\n'
                message_text += '\n'
                message_text += f"–§–ò–û —Ö–æ–∑—è–∏–Ω–∞: {obj.FIO}" + '\n'
                message_text += f"–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {obj.social_position.to_str()}" + '\n'
                message_text += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {obj.date_of_birth.strftime('%d.%m.%Y')}" + '\n'
                message_text += f"–ê–¥—Ä–µ—Å: {obj.address}" + '\n'
            else:
                message_text = "–ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±–∞–∫–∞—Ö —ç—Ç–æ–≥–æ –∫–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—É–±–∞!" + '\n'

            return message_text

    def back_button(self, context):
        return InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{self.menu_name}")

    def center_buttons(self, context, o=None):
        buttons = []
        buttons.append(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±–∞–∫—É", callback_data="add_dog"))
        if o:
            buttons.append(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏", callback_data="edit_dog"))
        return buttons

    def object_buttons(self, context, obj):

        buttons = []

        if obj:
            buttons.append(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ö–æ–∑—è–∏–Ω–∞", callback_data='change_social_position'))
            buttons.append(InlineKeyboardButton("–£—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö", callback_data='dog_competitions'))
            buttons.append(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏", callback_data=f"delete_{self.menu_name}"))
        return group_buttons(buttons, 1)

    def ask_competition(self, update, context):
        user = context.user_data['user']
        club = self.parent.selected_object(context)
        competition = DBSession.query(Competition).filter(Competition.club_id == club.id).first()
        dog = self.selected_object(context)
        buttons = []
        dog_competition_aosc = DBSession.query(DogCompetitions).get((dog.id, competition.id))
        if dog_competition_aosc:
            message_text = "–£—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–≤–Ω–æ–≤–∞–Ω–∏–∏" + '\n'
            message_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {competition.date.strftime('%d.%m.%Y ')}" + '\n'
            message_text += f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {competition.date.strftime('%d.%m.%Y ')}" + '\n'
            message_text += f"–í–∑–Ω–æ—Å: {competition.contributiont}" + '\n'
            message_text += f"–ö–æ–ª-–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π: {competition.viewers_quantity}" + '\n'
            message_text += f"–ù–∞–≥—Ä–∞–¥–∞: {dog_competition_aosc.reward}" + '\n'
        else:
            message_text = "–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"
        buttons.append([InlineKeyboardButton("üîô Back", callback_data=f'back_to_dog')])
        send_or_edit(context, chat_id=user.chat_id, text=message_text, reply_markup=InlineKeyboardMarkup(buttons, resize_keyboard=True))
        return self.States.ASK_COMPETITION

    def ask_change_social_position(self, update, context):
        delete_refresh_job(context)
        user = context.user_data['user']
        buttons = []
        message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ö–æ–∑—è–∏–Ω–∞"
        obj = self.selected_object(context)
        if obj:
            buttons.append([InlineKeyboardButton("–°–ª—É–∂–∞—â–∏–π", callback_data='pos_employee')])
            buttons.append([InlineKeyboardButton("–£—á–∞—â–∏–π—Å—è", callback_data='pos_student')])
            buttons.append([InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", callback_data='pos_businessman')])
            buttons.append([InlineKeyboardButton("–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä", callback_data='pos_pensioner')])
            buttons.append([InlineKeyboardButton("–†–∞–±–æ—á–∏–π", callback_data='pos_working')])
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'back_to_dog')])
            send_or_edit(context, chat_id=user.chat_id, text=message_text, reply_markup=InlineKeyboardMarkup(buttons, resize_keyboard=True))

        return self.States.ASK_SOCIAL_POSITION

    def set_social_position(self, update, context):
        pos_str = update.callback_query.data.replace("pos_", "")
        obj = self.selected_object(context)
        obj.social_position = SocialPosition[pos_str]
        if not add_to_db(obj):
            return self.conv_fallback(context)
        self.send_message(context)
        return self.States.ACTION

    def back_to_dog(self, update, context):
        self.send_message(context)
        return self.States.ACTION

    def additional_states(self):
        add_dog = DogAddMenu(self)
        edit_edit = DogEditMenu(self)
        return {self.States.ACTION: [add_dog.handler,
                                     edit_edit.handler,
                                     CallbackQueryHandler(self.ask_change_social_position, pattern='^change_social_position$'),
                                     CallbackQueryHandler(self.ask_competition, pattern='^dog_competitions$')
                                     ],
                self.States.ASK_SOCIAL_POSITION: [CallbackQueryHandler(self.back_to_dog, pattern='^back_to_dog$'),
                                                  CallbackQueryHandler(self.set_social_position, pattern='^pos_(employee|student|businessman|pensioner|working)$')],
                self.States.ASK_COMPETITION: [CallbackQueryHandler(self.back_to_dog, pattern='^back_to_dog$')]}

    def after_delete_text(self, context):
        return "–î–∞–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏ —É–¥–∞–ª–µ–Ω—ã"


class DogAddMenu(ArrowAddEditMenu):
    menu_name = 'dog_add_menu'
    model = Dog

    def entry(self, update, context):
        return super(DogAddMenu, self).entry(update, context)

    def query_object(self, context):
        return None

    def fields(self, context):
        year = datetime.datetime.now().year
        fields = [self.Field('nickname', "*–ö–ª–∏—á–∫–∞", validators.String(), required=True),
                  self.Field('breed', "*–ü–æ—Ä–æ–¥–∞", validators.String(), required=True),
                  self.Field('year', "*–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è", validators.Number(min=1, max=year), required=True, default=0),
                  self.Field('price', "*–¶–µ–Ω–∞ –∑–∞ —â–µ–Ω–∫–∞", validators.Number(min=1), required=True, default=0),
                  self.Field('FIO', "*–§–ò–û —Ö–æ–∑—è–∏–Ω–∞", validators.String(), required=True),
                  self.Field('date_of_birth', "*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", validators.DateConverter()),
                  self.Field('address', "*–ê–¥—Ä–µ—Å", validators.String(), required=True)]
        return fields

    def entry_points(self):
        return [CallbackQueryHandler(self.entry, pattern="^add_dog$")]

    def save_object(self, obj, context, session=None):
        user_data = context.user_data
        obj.nickname = user_data[self.menu_name]['nickname']
        obj.breed = user_data[self.menu_name]['breed']
        obj.year = user_data[self.menu_name]['year']
        obj.price = user_data[self.menu_name]['price']
        obj.FIO = user_data[self.menu_name]['FIO']
        obj.date_of_birth = user_data[self.menu_name]['date_of_birth']
        obj.address = user_data[self.menu_name]['address']
        obj.dog_training_club = self.parent.parent.selected_object(context)

        if not add_to_db(obj, session):
            return self.conv_fallback(context)


class DogEditMenu(ArrowAddEditMenu):
    menu_name = 'dog_edit_menu'
    model = Dog

    def entry(self, update, context):
        return super(DogEditMenu, self).entry(update, context)

    def query_object(self, context):

        dog = self.parent.selected_object(context)
        if dog:
            return DBSession.query(Dog).filter(Dog.id == dog.id).first()
        else:
            self.parent.update_objects(context)
            self.parent.send_message(context)
            return ConversationHandler.END

    def fields(self, context):
        year = datetime.datetime.now().year
        fields = [self.Field('nickname', "*–ö–ª–∏—á–∫–∞", validators.String(), required=True),
                  self.Field('breed', "*–ü–æ—Ä–æ–¥–∞", validators.String(), required=True),
                  self.Field('year', "*–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è", validators.Number(min=1, max=year), required=True, default=0),
                  self.Field('price', "*–¶–µ–Ω–∞ –∑–∞ —â–µ–Ω–∫–∞", validators.Number(min=1), required=True, default=0),
                  self.Field('FIO', "*–§–ò–û —Ö–æ–∑—è–∏–Ω–∞", validators.String(), required=True),
                  self.Field('date_of_birth', "*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", validators.DateConverter()),
                  self.Field('address', "*–ê–¥—Ä–µ—Å", validators.String(), required=True)]
        return fields

    def entry_points(self):
        return [CallbackQueryHandler(self.entry, pattern="^edit_dog$")]




